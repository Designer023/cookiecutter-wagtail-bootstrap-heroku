# Generated by Django 2.1.5 on 2019-02-05 11:30

import boost_cms.mixins.pagination
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        ('boost_cms', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=80, unique=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='BlogLanding',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=(boost_cms.mixins.pagination.PaginatedMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('date', models.DateTimeField(verbose_name='Post date')),
                ('sub_title', models.CharField(blank=True, help_text='Subtext to appear on page styles that support sub-headings', max_length=256, null=True)),
                ('page_body', wagtail.core.fields.StreamField([('row', wagtail.core.blocks.StructBlock([('content_list', wagtail.core.blocks.StreamBlock([('column', wagtail.core.blocks.StructBlock([('columns', wagtail.core.blocks.StructBlock([('xs', wagtail.core.blocks.IntegerBlock(default=12, max_value=12, min_value=1, required=False)), ('sm', wagtail.core.blocks.IntegerBlock(max_value=12, min_value=1, required=False)), ('md', wagtail.core.blocks.IntegerBlock(max_value=12, min_value=1, required=False)), ('lg', wagtail.core.blocks.IntegerBlock(max_value=12, min_value=1, required=False)), ('xl', wagtail.core.blocks.IntegerBlock(max_value=12, min_value=1, required=False))])), ('offset', wagtail.core.blocks.StructBlock([('xs', wagtail.core.blocks.IntegerBlock(max_value=11, min_value=0, required=False)), ('sm', wagtail.core.blocks.IntegerBlock(max_value=11, min_value=0, required=False)), ('md', wagtail.core.blocks.IntegerBlock(max_value=11, min_value=0, required=False)), ('lg', wagtail.core.blocks.IntegerBlock(max_value=11, min_value=0, required=False)), ('xl', wagtail.core.blocks.IntegerBlock(max_value=11, min_value=0, required=False))])), ('order', wagtail.core.blocks.StructBlock([('xs', wagtail.core.blocks.IntegerBlock(max_value=13, min_value=-1, required=False)), ('sm', wagtail.core.blocks.IntegerBlock(max_value=13, min_value=-1, required=False)), ('md', wagtail.core.blocks.IntegerBlock(max_value=13, min_value=-1, required=False)), ('lg', wagtail.core.blocks.IntegerBlock(max_value=13, min_value=-1, required=False)), ('xl', wagtail.core.blocks.IntegerBlock(max_value=13, min_value=-1, required=False))])), ('content', wagtail.core.blocks.StreamBlock([('richtext', wagtail.core.blocks.RichTextBlock()), ('html', wagtail.core.blocks.RawHTMLBlock()), ('code', wagtail.core.blocks.StructBlock([('language', wagtail.core.blocks.ChoiceBlock(choices=[('bash', 'Bash/Shell'), ('css', 'CSS'), ('diff', 'diff'), ('html', 'HTML'), ('javascript', 'Javascript'), ('json', 'JSON'), ('python', 'Python'), ('scss', 'SCSS'), ('yaml', 'YAML')], help_text='Coding language', label='Language')), ('code', wagtail.core.blocks.TextBlock(label='Code'))])), ('image', wagtail.images.blocks.ImageChooserBlock()), ('bootstrap_card', wagtail.core.blocks.StructBlock([('background_theme', wagtail.core.blocks.ChoiceBlock(choices=[(None, '---'), ('primary', 'Primary'), ('secondary', 'Secondary'), ('light', 'Light'), ('dark', 'Dark'), ('success', 'Success'), ('danger', 'Danger'), ('warning', 'Warning'), ('info', 'Info')], required=False)), ('text_theme', wagtail.core.blocks.ChoiceBlock(choices=[(None, '---'), ('primary', 'Primary'), ('secondary', 'Secondary'), ('light', 'Light'), ('dark', 'Dark'), ('success', 'Success'), ('danger', 'Danger'), ('warning', 'Warning'), ('info', 'Info')], required=False)), ('border_theme', wagtail.core.blocks.ChoiceBlock(choices=[(None, '---'), ('primary', 'Primary'), ('secondary', 'Secondary'), ('light', 'Light'), ('dark', 'Dark'), ('success', 'Success'), ('danger', 'Danger'), ('warning', 'Warning'), ('info', 'Info')], required=False)), ('extra_classes', wagtail.core.blocks.CharBlock(required=False)), ('custom_styles', wagtail.core.blocks.CharBlock(required=False)), ('header', wagtail.core.blocks.CharBlock(required=False)), ('title', wagtail.core.blocks.CharBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock(features=['p']))])), ('bootstrap_alert', wagtail.core.blocks.StructBlock([('background_theme', wagtail.core.blocks.ChoiceBlock(choices=[(None, '---'), ('primary', 'Primary'), ('secondary', 'Secondary'), ('light', 'Light'), ('dark', 'Dark'), ('success', 'Success'), ('danger', 'Danger'), ('warning', 'Warning'), ('info', 'Info')], required=False)), ('title', wagtail.core.blocks.CharBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock(features=['p'])), ('dismissable', wagtail.core.blocks.BooleanBlock(required=False))]))]))]))]))])), ('richtext', wagtail.core.blocks.RichTextBlock()), ('html', wagtail.core.blocks.RawHTMLBlock()), ('code', wagtail.core.blocks.StructBlock([('language', wagtail.core.blocks.ChoiceBlock(choices=[('bash', 'Bash/Shell'), ('css', 'CSS'), ('diff', 'diff'), ('html', 'HTML'), ('javascript', 'Javascript'), ('json', 'JSON'), ('python', 'Python'), ('scss', 'SCSS'), ('yaml', 'YAML')], help_text='Coding language', label='Language')), ('code', wagtail.core.blocks.TextBlock(label='Code'))])), ('image', wagtail.images.blocks.ImageChooserBlock()), ('bootstrap_card', wagtail.core.blocks.StructBlock([('background_theme', wagtail.core.blocks.ChoiceBlock(choices=[(None, '---'), ('primary', 'Primary'), ('secondary', 'Secondary'), ('light', 'Light'), ('dark', 'Dark'), ('success', 'Success'), ('danger', 'Danger'), ('warning', 'Warning'), ('info', 'Info')], required=False)), ('text_theme', wagtail.core.blocks.ChoiceBlock(choices=[(None, '---'), ('primary', 'Primary'), ('secondary', 'Secondary'), ('light', 'Light'), ('dark', 'Dark'), ('success', 'Success'), ('danger', 'Danger'), ('warning', 'Warning'), ('info', 'Info')], required=False)), ('border_theme', wagtail.core.blocks.ChoiceBlock(choices=[(None, '---'), ('primary', 'Primary'), ('secondary', 'Secondary'), ('light', 'Light'), ('dark', 'Dark'), ('success', 'Success'), ('danger', 'Danger'), ('warning', 'Warning'), ('info', 'Info')], required=False)), ('extra_classes', wagtail.core.blocks.CharBlock(required=False)), ('custom_styles', wagtail.core.blocks.CharBlock(required=False)), ('header', wagtail.core.blocks.CharBlock(required=False)), ('title', wagtail.core.blocks.CharBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock(features=['p']))])), ('bootstrap_alert', wagtail.core.blocks.StructBlock([('background_theme', wagtail.core.blocks.ChoiceBlock(choices=[(None, '---'), ('primary', 'Primary'), ('secondary', 'Secondary'), ('light', 'Light'), ('dark', 'Dark'), ('success', 'Success'), ('danger', 'Danger'), ('warning', 'Warning'), ('info', 'Info')], required=False)), ('title', wagtail.core.blocks.CharBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock(features=['p'])), ('dismissable', wagtail.core.blocks.BooleanBlock(required=False))]))])),
                ('categories', modelcluster.fields.ParentalManyToManyField(blank=True, to='boost_cms.BlogCategory')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('taggit.tag',),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='boost_cms.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='blogpagetag',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='boost_cms.BlogPost'),
        ),
        migrations.AddField(
            model_name='blogpagetag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boost_cms_blogpagetag_items', to='taggit.Tag'),
        ),
    ]
